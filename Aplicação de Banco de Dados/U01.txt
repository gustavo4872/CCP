SELECT NM_CLI, NM_VDD, NM_LOJ, CD_VEN, DT_VEN FROM LOJA L JOIN VENDA V ON L.CD_LOJ = V.CD_LOJ JOIN VENDEDOR VDD ON VDD.CD_VDD = V.CD_VDD JOIN CLIENTE C ON C.CD_CLI = V.CD_CLI
SELECT V.CD_LOJ, V.CD_VEN, V.DT_VEN, PRO.NM_PRO, ITV.QT_VEN FROM VENDA V JOIN ITEM_VENDA ITV ON (V.CD_LOJ = ITV.CD_LOJ AND V.CD_VEN = ITV.CD_VEN) JOIN PRODUTO PRO ON (ITV.CD_PRO = PRO.CD_PRO) ORDER BY V.CD_LOJ
SELECT * FROM CIDADE CI JOIN CLIENTE CL ON CI.CD_CID = CL.CD_CID
SELECT * FROM VENDEDOR V LEFT JOIN VENDEDOR ON V.CD_SUPERVISOR = VENDEDOR.CD_VDD ORDER BY V.NM_VDD
SELECT * FROM VENDEDOR V FULL JOIN VENDEDOR VEND ON V.CD_SUPERVISOR = VEND.CD_VDD

SELECT CL.NM_CLI AS NOME, V.CD_LOJ AS CODIGO_LOJA, V.CD_VEN AS VENDA, V.DT_VEN AS DATA_VENDA FROM VENDA V JOIN CLIENTE CL ON CL.CD_CLI = V.CD_CLI WHERE V.CD_CLI IN (1,2,5,8)
SELECT VEN.NM_VDD AS NOME_VENDEDOR, LJ.NM_LOJ AS NOME_LOJA, V.CD_VEN AS CODIGO_VEN, V.DT_VEN AS DATA_VENDA FROM VENDA V JOIN VENDEDOR VEN ON V.CD_VDD = VEN.CD_VDD  JOIN LOJA LJ ON V.CD_LOJ = LJ.CD_LOJ
SELECT VEN.NM_VDD AS NOME_VENDEDOR, LJ.NM_LOJ AS NOME_LOJA, CLI.NM_CLI AS NOME_CLIENTE, V.CD_VEN AS CODIGO_VENDA, V.DT_VEN AS DATA_VENDA FROM VENDA V JOIN VENDEDOR VEN ON V.CD_VDD = VEN.CD_VDD JOIN LOJA LJ ON V.CD_LOJ = LJ.CD_LOJ JOIN CLIENTE CLI ON V.CD_CLI = CLI.CD_CLI
SELECT V.CD_LOJ AS CODIGO_LOJA, V.CD_VEN AS CODIGO_VENDA, V.DT_VEN AS DATA_VENDA, PRO.NM_PRO AS NOME_PRODUTO, ITV.QT_VEN AS QUANTIDADE_VENDIDA FROM VENDA V JOIN ITEM_VENDA ITV ON ITV.CD_VEN = V.CD_VEN JOIN PRODUTO PRO ON ITV.CD_PRO = PRO.CD_PRO
SELECT V.CD_LOJ AS CODIGO_LOJA, V.CD_VEN AS CODIGO_VENDA, V.DT_VEN AS DATA_VENDA, VDD.NM_VDD AS NOME_VENDEDOR FROM VENDA V RIGHT JOIN VENDEDOR VDD ON V.CD_VDD = VDD.CD_VDD
SELECT VDD.NM_VDD AS VENDEDOR, V.NM_VDD AS SUPERIOR FROM VENDEDOR VDD LEFT JOIN VENDEDOR V ON VDD.CD_SUPERVISOR = V.CD_VDD
SELECT CLI.NM_CLI AS NOME_CLIENTE, LJ.NM_LOJ AS NOME_LOJA, V.CD_VEN AS CODIGO_VENDA, V.DT_VEN AS DATA_VENDA, PAR.DT_VCTO AS VENCIMENTO_PARCELA, PAR.CD_PAR AS CODIGO_PARCELA, PAR.VL_PAR AS VALOR_PARCELA FROM PARCELA PAR JOIN VENDA V ON PAR.CD_VEN = V.CD_VEN JOIN LOJA LJ ON PAR.CD_LOJ = LJ.CD_LOJ JOIN CLIENTE CLI ON V.CD_CLI = CLI.CD_CLI WHERE PAR.CD_LOJ IN (1,3) AND PAR.DT_VCTO BETWEEN '01/01/2006' AND '29/12/2006'
SELECT DISTINCT CLI.NM_CID FROM CLIENTE CLI JOIN VENDA V ON V.CD_CLI = CLI.CD_CLI;

INSERT INTO LOJA VALUES (4,'LOJA4','TUBARÃO')
INSERT INTO LOJA VALUES (5,'LOJA5','LAGUNA')
INSERT INTO VENDA VALUES (4, 19, '04/09/2019', 6, 9)
INSERT INTO VENDA VALUES (4, 20, '04/09/2019', 7, 8)
INSERT INTO VENDA VALUES (5, 21, '04/09/2019', 5, 7);
INSERT INTO VENDA VALUES (5, 22, '04/09/2019', 4, 6);
SELECT * FROM LOJA, VENDA

SELECT NM_CLI,NM_LOJ,CD_VEN,DT_VEN,CD_PAR,VL_PAR
FROM PARCELA P JOIN VENDA V ON (P.CD_LOJ = V.CD_LOJ AND P.CD_VEN = V.CD_VEN)
	JOIN CLIENTE C ON (V.CD_CLI = C.CD_CLI);
  
SELECT AVG(VL_SAL) FROM VENDEDOR;
SELECT COUNT(*) FROM VENDEDOR;
SELECT ROUND(AVG(P.VL_PAR),2) AS MEDIA_PARCELAS_LOJA FROM VENDA V JOIN PARCELA P ON P.CD_LOJ = V.CD_LOJ GROUP BY V.CD_LOJ;
SELECT CD_LOJ, COUNT(CD_VDD) FROM VENDA GROUP BY CD_LOJ;
SELECT CD_LOJ, COUNT(CD_VEN) AS VENDAS FROM VENDA GROUP BY CD_LOJ;
SELECT L.NM_LOJ AS LOJA, COUNT(V.CD_LOJ) AS VENDAS FROM VENDA V JOIN LOJA L ON L.CD_LOJ = V.CD_LOJ GROUP BY L.NM_LOJ ORDER BY LOJA
SELECT CD_LOJ AS LOJA, CD_VEN AS VENDA, COUNT(CD_PAR) AS PARCELAS FROM PARCELA GROUP BY CD_LOJ, CD_VEN ORDER BY CD_LOJ, CD_VEN;

SELECT CD_LOJ, COUNT(*), SUM(VL_PAR) FROM PARCELA GROUP BY CD_LOJ HAVING SUM(VL_PAR)>10000 ORDER BY CD_LOJ;
--NA CLAUSULA WHERE, NÃO POSSO EXECUTAR OPERAÇÕES COM FUNÇÃO DE GRUPO
--NA CLAUSULA HAVING, NÃO POSSO EXECUTAR OPERAÇÕES SEM FUNÇÃO DE GRUPO

SELECT * FROM VENDEDOR
SELECT * FROM VENDEDOR WHERE VL_SAL > (SELECT VL_SAL FROM VENDEDOR WHERE CD_VDD = 1)
SELECT * FROM VENDEDOR WHERE VL_SAL > ANY (SELECT VL_SAL FROM VENDEDOR WHERE CD_VDD = 1 OR CD_VDD = 2) -- Lista o salário que for maior do que um dos dois salários que a subconsulta retornar, ou seja, retorna o salário que for maior que o menor salário da subconsulta
SELECT * FROM VENDEDOR WHERE VL_SAL > All (SELECT VL_SAL FROM VENDEDOR WHERE CD_VDD = 1 OR CD_VDD = 2) -- Lista o salário que for maior do que os dois salários que a subconsulta retornar, ou seja, retorna o salário que for maior que o maior salário da subconsulta


DECLARE 
  WVDD VENDEDOR%ROWTYPE;
  WNM_VDD VENDEDOR.NM_VDD%TYPE;
  WVL_SAL VENDEDOR.VL_SAL%TYPE;
  WNR_VENDAS NUMBER(3);
BEGIN 
  DBMS_OUTPUT.PUT_LINE('INICIANDO A EXECUÇÃO DO PROGRAMA!');  
  FOR CONT IN 1..5 LOOP
    BEGIN
      SELECT * INTO WVDD FROM VENDEDOR WHERE CD_VDD = 1;
      DBMS_OUTPUT.PUT('VENDEDOR='||WVDD.NM_VDD||' SALARIO='||WVDD.VL_SAL);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('VENDEDOR NÃO ENCONTRADO!');
    WHEN TOO_MANY_ROWS THEN
      DBMS_OUTPUT.PUT_LINE('MUITOS VENDEDORES ENCONTRADOS!');
  END;
  SELECT COUNT(*) INTO WNR_VENDAS FROM VENDA WHERE CD_VDD = 1;
  DBMS_OUTPUT.PUT_LINE(' NR_VENDAS='||WNR_VENDAS);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERRO DESCONHECIDO');
END;



DECLARE
  CURSOR CVDD(PNRVEN NUMBER) IS
    SELECT VDD.CD_VDD,NM_VDD,VL_SAL,COUNT(*) NR_VENDAS 
    FROM VENDEDOR VDD JOIN VENDA V ON (VDD.CD_VDD = V.CD_VDD)
    GROUP BY VDD.CD_VDD,NM_VDD,VL_SAL
    HAVING COUNT(*) > PNRVEN
    ORDER BY VDD.CD_VDD,NM_VDD,VL_SAL;
  CURSOR CVEN(PVDD NUMBER) IS
    SELECT CD_LOJ,CD_VEN,DT_VEN FROM VENDA WHERE CD_VDD= PVDD;
  CURSOR CPAR (PNRVEN NUMBER) IS 
  
  WREGISTRO CVDD%ROWTYPE;
  WREGVEN CVEN%ROWTYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('INICIANDO A EXECUÇÃO DO PROGRAMA!!');
  OPEN CVDD(4);
  FETCH CVDD INTO WREGISTRO;
  WHILE CVDD%FOUND LOOP
    DBMS_OUTPUT.PUT_LINE(WREGISTRO.NM_VDD||' - '||WREGISTRO.VL_SAL||' - '||WREGISTRO.NR_VENDAS);
    OPEN CVEN(WREGISTRO.CD_VDD);
    FETCH CVEN INTO WREGVEN;
    WHILE CVEN%FOUND LOOP
      DBMS_OUTPUT.PUT_LINE('VENDA ==> '||WREGVEN.CD_LOJ||' - '||WREGVEN.CD_VEN||' - '||WREGVEN.DT_VEN);
      FETCH CVEN INTO WREGVEN;
    END LOOP;
    CLOSE CVEN;
    FETCH CVDD INTO WREGISTRO;
  END LOOP;
  CLOSE CVDD;
  DBMS_OUTPUT.PUT_LINE('FIM DE EXECUÇÃO');
END;

